Here’s a **complete guide to all possible uses and examples** of the **rest (`...rest`)** and **spread (`...spread`)** operators in JavaScript. These operators are incredibly powerful and behave differently depending on **context**—assignment, function calls, array/object literals, and parameters.

---

## 🔁 1. **REST OPERATOR (`...`)**

> **Collects** remaining elements or properties into a new array or object.

---

### ✅ A. **Function Parameters**

```js
function sum(...numbers) {
  return numbers.reduce((acc, val) => acc + val, 0);
}
sum(1, 2, 3); // 6
```

---

### ✅ B. **Array Destructuring**

```js
const [first, ...rest] = [10, 20, 30, 40];
// first = 10, rest = [20, 30, 40]
```

---

### ✅ C. **Object Destructuring**

```js
const user = { name: 'Alice', age: 25, email: 'a@example.com' };
const { name, ...details } = user;
// name = 'Alice', details = { age: 25, email: 'a@example.com' }
```

---

### ✅ D. **Nested Rest in Destructuring**

```js
const data = [1, 2, 3, 4];
const [a, ...[b, ...rest]] = data;
// a = 1, b = 2, rest = [3, 4]
```

---

## 🌟 2. **SPREAD OPERATOR (`...`)**

> **Expands** iterable (array, string, etc.) or object properties into another array or object.

---

### ✅ A. **Function Calls (arguments)**

```js
const nums = [1, 2, 3];
Math.max(...nums); // 3
```

---

### ✅ B. **Array Literals**

```js
const arr1 = [1, 2];
const arr2 = [...arr1, 3, 4];
// arr2 = [1, 2, 3, 4]
```

---

### ✅ C. **Merging Arrays**

```js
const a = [1, 2];
const b = [3, 4];
const merged = [...a, ...b];
// [1, 2, 3, 4]
```

---

### ✅ D. **Copying Arrays**

```js
const original = [1, 2, 3];
const copy = [...original];
// copy is a new array
```

---

### ✅ E. **Spread in Object Literals (ES2018+)**

```js
const user = { name: 'Alice', age: 25 };
const newUser = { ...user, email: 'a@example.com' };
// { name: 'Alice', age: 25, email: 'a@example.com' }
```

---

### ✅ F. **Overriding Properties in Objects**

```js
const settings = { theme: 'dark', fontSize: 14 };
const newSettings = { ...settings, fontSize: 16 };
// fontSize is overridden: 16
```

---

### ✅ G. **Merging Objects**

```js
const obj1 = { a: 1 };
const obj2 = { b: 2 };
const combined = { ...obj1, ...obj2 };
// { a: 1, b: 2 }
```

---

### ✅ H. **Spread with Strings / Iterables**

```js
const chars = [...'hello'];
// ['h', 'e', 'l', 'l', 'o']
```

---

### ✅ I. **Using Spread in Array Constructor**

```js
const items = [1, 2];
const list = [0, ...items, 3];
// [0, 1, 2, 3]
```

---

### ✅ J. **Spread in React Props (JSX)**

```jsx
const props = { id: 'btn', disabled: true };
<button {...props}>Click</button>
```

---

## 🧪 REST vs SPREAD Cheat Sheet

| Context              | Usage                        | Operator Role   |
| -------------------- | ---------------------------- | --------------- |
| Function parameters  | `function(...args)`          | Collect (rest)  |
| Array destructuring  | `const [a, ...rest] = arr`   | Collect (rest)  |
| Object destructuring | `const { a, ...rest } = obj` | Collect (rest)  |
| Function calls       | `fn(...args)`                | Expand (spread) |
| Array literals       | `[...arr]`                   | Expand (spread) |
| Object literals      | `{...obj}`                   | Expand (spread) |

---

